import { evaluationService } from './evaluation.service';
// Firebase supprim√© - utilisez PostgreSQL
// import { Pool } from 'pg';
import { openaiService } from './openai.service';
import { pineconeService } from './pinecone.service';

export class EcosService {
  static async getScenarios(): Promise<any[]> {
    // Retourner des donn√©es mock√©es temporairement
    return [
      { 
        id: '1', 
        title: 'ECOS Sc√©nario 1', 
        type: 'clinical', 
        status: 'active', 
        createdAt: new Date().toISOString(), 
        exchanges: 5,
        pineconeIndex: 'infirmierbeaujon'
      },
      { 
        id: '2', 
        title: 'ECOS Sc√©nario 2', 
        type: 'emergency', 
        status: 'active', 
        createdAt: new Date().toISOString(), 
        exchanges: 8,
        pineconeIndex: 'infirmierbeaujon'
      }
    ];
  }

  static async createSession(scenarioId: string, studentEmail: string): Promise<any> {
    // Mock temporaire
    return {
      id: `session_${Date.now()}`,
      scenarioId,
      studentEmail,
      status: 'active',
      startTime: new Date().toISOString()
    };
  }

  static async getSessions(studentEmail: string): Promise<any[]> {
    // Mock temporaire
    return [];
  }

  async getPatientResponse(
    userMessage: string,
    scenario: any,
    conversationHistory: Array<{ role: string; content: string }> = []
  ): Promise<string> {
    try {
      console.log(`üß† Generating patient response for scenario: ${scenario.title}`);
      console.log(`üìã Using Pinecone index: ${scenario.pineconeIndex || 'default'}`);

      // Step 1: Retrieve relevant knowledge from Pinecone
      let relevantContext = "";

      if (scenario.pineconeIndex) {
        try {
          console.log(`üîç Querying Pinecone index: ${scenario.pineconeIndex}`);
          const ragContents = await pineconeService.queryVectors(
            userMessage + " " + scenario.title,
            scenario.pineconeIndex,
            3
          );

          if (ragContents && ragContents.length > 0) {
            relevantContext = ragContents
              .map(content => content.content)
              .join('\n\n');
            console.log(`‚úÖ Retrieved ${ragContents.length} relevant documents from Pinecone`);
            console.log(`üìÑ Context preview: ${relevantContext.substring(0, 200)}...`);
          } else {
            console.log(`‚ö†Ô∏è No relevant documents found in index: ${scenario.pineconeIndex}`);
          }
        } catch (error) {
          console.error(`‚ùå Error querying Pinecone index ${scenario.pineconeIndex}:`, error);
          // Continue without RAG context
        }
      } else {
        // Fallback to default index
        try {
          console.log(`üîç Using default Pinecone index for RAG search`);
          const ragContents = await pineconeService.searchRelevantContent(
            userMessage + " " + scenario.title,
            3
          );

          if (ragContents && ragContents.length > 0) {
            relevantContext = ragContents
              .map(content => content.content)
              .join('\n\n');
            console.log(`‚úÖ Retrieved ${ragContents.length} relevant documents from default index`);
          }
        } catch (error) {
          console.error(`‚ùå Error querying default Pinecone index:`, error);
        }
      }

      // Step 2: Build conversation context
      const conversationContext = conversationHistory
        .slice(-5) // Keep last 5 exchanges for context
        .map(msg => `${msg.role === 'user' ? '√âtudiant' : 'Patient'}: ${msg.content}`)
        .join('\n');

      // Step 3: Create patient prompt
      const systemPrompt = `Tu es un patient virtuel dans une simulation m√©dicale ECOS (Examen Clinique Objectif Structur√©).

CONTEXTE DU SC√âNARIO:
${scenario.description}

PROMPT DU PATIENT:
${scenario.patientPrompt || 'Vous √™tes un patient qui pr√©sente les sympt√¥mes d√©crits dans le sc√©nario.'}

${relevantContext ? `CONNAISSANCES M√âDICALES PERTINENTES:
${relevantContext}

Utilise ces informations pour enrichir tes r√©ponses de patient, mais reste toujours dans le r√¥le du patient.` : ''}

INSTRUCTIONS IMPORTANTES:
- R√©ponds UNIQUEMENT en tant que patient, jamais en tant que m√©decin ou expert m√©dical
- Utilise un langage simple et naturel, comme le ferait un vrai patient
- Ne donne JAMAIS de diagnostic m√©dical ou de conseils m√©dicaux
- D√©cris tes sympt√¥mes de mani√®re subjective (ce que tu ressens)
- Sois coh√©rent avec l'histoire du patient d√©crite dans le sc√©nario
- Si l'√©tudiant pose une question technique, r√©ponds en tant que patient qui ne comprend pas les termes m√©dicaux
- Montre de l'inqui√©tude ou de l'anxi√©t√© appropri√©e selon la situation
- Utilise des expressions comme "j'ai mal", "√ßa me fait souffrir", "je suis inquiet", etc.
- Adapte tes r√©ponses √† la question sp√©cifique pos√©e
- Sois r√©aliste dans tes descriptions de sympt√¥mes

${conversationContext ? `HISTORIQUE DE LA CONVERSATION:
${conversationContext}` : ''}

Question actuelle de l'√©tudiant: "${userMessage}"

R√©ponds maintenant √† cette question sp√©cifique en restant dans le r√¥le du patient.`;

      console.log('ü§ñ Generating response with OpenAI...');
      console.log('üìù System prompt length:', systemPrompt.length);

      const response = await openaiService.createCompletion({
        model: "gpt-4o",
        messages: [
          { role: "system", content: systemPrompt },
          { role: "user", content: userMessage }
        ],
        temperature: 0.7,
        max_tokens: 300
      });

      const patientResponse = response.choices[0].message.content;
      console.log('‚úÖ Patient response generated:', patientResponse?.substring(0, 100) + '...');
      return patientResponse;
    } catch (error) {
      console.error("Error getting patient response:", error);
      throw new Error("Erreur lors de la g√©n√©ration de la r√©ponse du patient");
    }
  }
}

export const ecosService = new EcosService();